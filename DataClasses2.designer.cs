#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication4
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyProducts")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHist(Hist instance);
    partial void UpdateHist(Hist instance);
    partial void DeleteHist(Hist instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MyProductsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hist> Hists
		{
			get
			{
				return this.GetTable<Hist>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hist")]
	public partial class Hist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _symbol;
		
		private System.Nullable<System.DateTime> _timestamp;
		
		private System.Nullable<System.DateTime> _tradingDay;
		
		private string _sessionCode;
		
		private System.Nullable<double> _tickPrice;
		
		private System.Nullable<int> _tickSize;
		
		private System.Nullable<double> _open;
		
		private System.Nullable<double> _high;
		
		private System.Nullable<double> _low;
		
		private System.Nullable<double> _close;
		
		private System.Nullable<int> _volume;
		
		private System.Nullable<int> _openInterest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnsymbolChanging(string value);
    partial void OnsymbolChanged();
    partial void OntimestampChanging(System.Nullable<System.DateTime> value);
    partial void OntimestampChanged();
    partial void OntradingDayChanging(System.Nullable<System.DateTime> value);
    partial void OntradingDayChanged();
    partial void OnsessionCodeChanging(string value);
    partial void OnsessionCodeChanged();
    partial void OntickPriceChanging(System.Nullable<double> value);
    partial void OntickPriceChanged();
    partial void OntickSizeChanging(System.Nullable<int> value);
    partial void OntickSizeChanged();
    partial void OnopenChanging(System.Nullable<double> value);
    partial void OnopenChanged();
    partial void OnhighChanging(System.Nullable<double> value);
    partial void OnhighChanged();
    partial void OnlowChanging(System.Nullable<double> value);
    partial void OnlowChanged();
    partial void OncloseChanging(System.Nullable<double> value);
    partial void OncloseChanged();
    partial void OnvolumeChanging(System.Nullable<int> value);
    partial void OnvolumeChanged();
    partial void OnopenInterestChanging(System.Nullable<int> value);
    partial void OnopenInterestChanged();
    #endregion
		
		public Hist()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_symbol", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string symbol
		{
			get
			{
				return this._symbol;
			}
			set
			{
				if ((this._symbol != value))
				{
					this.OnsymbolChanging(value);
					this.SendPropertyChanging();
					this._symbol = value;
					this.SendPropertyChanged("symbol");
					this.OnsymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tradingDay", DbType="Date")]
		public System.Nullable<System.DateTime> tradingDay
		{
			get
			{
				return this._tradingDay;
			}
			set
			{
				if ((this._tradingDay != value))
				{
					this.OntradingDayChanging(value);
					this.SendPropertyChanging();
					this._tradingDay = value;
					this.SendPropertyChanged("tradingDay");
					this.OntradingDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionCode", DbType="NChar(50)")]
		public string sessionCode
		{
			get
			{
				return this._sessionCode;
			}
			set
			{
				if ((this._sessionCode != value))
				{
					this.OnsessionCodeChanging(value);
					this.SendPropertyChanging();
					this._sessionCode = value;
					this.SendPropertyChanged("sessionCode");
					this.OnsessionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tickPrice", DbType="Float")]
		public System.Nullable<double> tickPrice
		{
			get
			{
				return this._tickPrice;
			}
			set
			{
				if ((this._tickPrice != value))
				{
					this.OntickPriceChanging(value);
					this.SendPropertyChanging();
					this._tickPrice = value;
					this.SendPropertyChanged("tickPrice");
					this.OntickPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tickSize", DbType="Int")]
		public System.Nullable<int> tickSize
		{
			get
			{
				return this._tickSize;
			}
			set
			{
				if ((this._tickSize != value))
				{
					this.OntickSizeChanging(value);
					this.SendPropertyChanging();
					this._tickSize = value;
					this.SendPropertyChanged("tickSize");
					this.OntickSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[open]", Storage="_open", DbType="Float")]
		public System.Nullable<double> open
		{
			get
			{
				return this._open;
			}
			set
			{
				if ((this._open != value))
				{
					this.OnopenChanging(value);
					this.SendPropertyChanging();
					this._open = value;
					this.SendPropertyChanged("open");
					this.OnopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_high", DbType="Float")]
		public System.Nullable<double> high
		{
			get
			{
				return this._high;
			}
			set
			{
				if ((this._high != value))
				{
					this.OnhighChanging(value);
					this.SendPropertyChanging();
					this._high = value;
					this.SendPropertyChanged("high");
					this.OnhighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_low", DbType="Float")]
		public System.Nullable<double> low
		{
			get
			{
				return this._low;
			}
			set
			{
				if ((this._low != value))
				{
					this.OnlowChanging(value);
					this.SendPropertyChanging();
					this._low = value;
					this.SendPropertyChanged("low");
					this.OnlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[close]", Storage="_close", DbType="Float")]
		public System.Nullable<double> close
		{
			get
			{
				return this._close;
			}
			set
			{
				if ((this._close != value))
				{
					this.OncloseChanging(value);
					this.SendPropertyChanging();
					this._close = value;
					this.SendPropertyChanged("close");
					this.OncloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volume", DbType="Int")]
		public System.Nullable<int> volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if ((this._volume != value))
				{
					this.OnvolumeChanging(value);
					this.SendPropertyChanging();
					this._volume = value;
					this.SendPropertyChanged("volume");
					this.OnvolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_openInterest", DbType="Int")]
		public System.Nullable<int> openInterest
		{
			get
			{
				return this._openInterest;
			}
			set
			{
				if ((this._openInterest != value))
				{
					this.OnopenInterestChanging(value);
					this.SendPropertyChanging();
					this._openInterest = value;
					this.SendPropertyChanged("openInterest");
					this.OnopenInterestChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
